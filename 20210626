event 를 addEventListener 외에 listening 하는 방법
  oneventname property에 event listener를 할당한다.
  ex) title.onclick = handleTitleClick;

현재 강의에서는 addEventListener를 더 선호한다.
  -> .removeEventListener로 event listener를 제거할 수 있기 때문이다.
  
학습을 진행하면서 추가적으로 배웠던 event (추후에 documentation을 보고 혼자 해보자)
  resize : 창의 크기가 변화하면 작동한다.
  copy : html코드 내의 text를 복사하면 작동한다.
  offline : wi-fi가 연결이 끊기면 작동한다.
  online : wi-fi가 연결되면 작동한다.

국비교육 프로젝트 진행 당시에는 onclick event에서 ajax로 textColor의 변화를 주는 방식으로 했었는데,
Javascript와 CSS의 기능을 분리하려한다면 className에 style을 주고 Javascript에서 해당 Tag 에 className을 부여하는 방식으로 한다.

raw value : 사용자가 지정한 value
  ex) h1.className = "clicked"; // 여기서는 clicked가 raw value가 된다.
  
raw value를 사용하면 오타가 났을 경우 하나하나 봐야하는 문제가 생긴다.
하지만 const clickedClass = "clicked";로 상수 정의 후 clickedClass를 사용함에 있어 오타가 난다면
clickeClass is not defined 와 같은 에러로 Javascript가 에러의 이유와 위치를 알려준다.

==========================================================
function handleTitleClick(){
  const clickedClass = "clicked sexy-font";
  if(h1.className === clickedClass){
    h1.className = "";
  } else {
    h1.className = clickedClass;
  }
}

h1.addEventListener("click", handleTitleClick);
==========================================================

해당 CSS가 적용된 클래스 를 태그에 넣거나 빼고 싶을 때 className을 사용해도 되지만,
기존의 클래스는 남겨놓고 추가 클래스를 넣거나 빼고 싶을 때 classList를 사용한다.

==========================================================
function handleTitleClick(){
  const clickedClass = "clicked";
  if(h1.classList.contains(clickedClass)){
    h1.classList.remove(clickedClass);
  } else {
    h1.classList.add(clickedClass);
  }
}
==========================================================

on/off 2가지의 상태변화만 있다면, toggle() function을 사용해준다.
==========================================================
function handleTitleClick(){
  h1.classList.toggle("clicked");
}
==========================================================

form 태그 내의 button을 누르면 input data 가 submit 되지만 페이지가 계속 새로고침된다.


EventListener 의 function 정의에서 argument data를 보는 방법
==========================================================
const loginForm = document.querySelector("#login-form");

function onLoginSubmit(tomato){
  tomato.preventDefault();
  console.log(tomato);
}

loginForm.addEventListener("submit", onLoginSubmit);
==========================================================
첫번째 argument에 해당 event 의 정보가 담겨있다.

.preventDefault();
  어떤 event 의 기본 행동이 발생하지 않도록 막는 function

"String" + valuableName; 으로 문자열을 합칠 수도 있지만, `String + ${valuableName}` 으로 합칠 수도 있다.
** 여기서 `와 '를 잘 구분하자. ( `는 숫자 1 왼쪽, '는 엔터키 왼쪽에 있다.)
  ex) greeting.innerText = `Hello ${username}`;


시계 기능
  일정 시간마다 특정 기능을 작동시키고 싶으면 setInterval 을 사용한다.
    ex) setInterval(getClock, 1000); // getClock function을 1000ms = 1s 마다 수행한다.
  페이지가 load 된 후 일정시간 뒤 한 번만 작동하고 싶으면 setTimeout 을 사용한다.
    ex) setTimeout(getClock, 1000); // getClock function을 페이지가 load 된 후 1초 뒤에 수행한다.
  시간을 표시할 때 1, 2, 3을 01, 02, 03으로 표현하고 싶다면 padStart 를 사용한다.
    ex) "1".padStart(2, "0"); // 참조 문자열이 "1"인 경우 1번째 argument인 maxlength = 2 를 충족하지 않기 때문에 앞의 빈 공간을 "0"으로 채워준다.
        채울 문자가 뒤에 오게 하고싶다면 .padEnd(manlength, "String"); 으로 정의한다.
        
      **하지만 이 function을 사용할 시 주의할 점이 시계같은 경우 Date를 숫자로 받지만, padStart와 padEnd는 second argument가 String타입이다.
      따라서, 참조값을 String()으로 감싸서 형변환을 해주어야 한다.

