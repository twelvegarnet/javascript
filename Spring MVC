1. Client로 부터 Request 를 담은 HTTP 요청이 오면 DispatcherServlet 이 해당 요청을 핸들링,컨트롤링한다.

2. DispatcherServlet 으로 전달된 HTTP Request 를 HandlerMapping Interface 를 통해 요청 URL과 일치하게 매핑된 Controller 를 찾는다.
  있을 경우 해당 Controller return, 없을 경우 null return 한다.
  HandlerMapping - HTTP 요청 URL 과 일치하는 Controller 를 찾아서 반환한다.
  
3. 얻어온 HandlerMapping 데이터를 이용해서 HandlerAdapter 에게 해당 URL 수행 요청을 전달한다.
  HandlerAdapter - HandlerMapping 에서 반환된 데이터를 이용해서 해당 URL 이 매핑된 Controller 로 HTTP Request 를 전달한다.

4. Controller 는 얻어온 요청 URL 에 따라 어떤 Business Logic을 수행할 지 결정하고 호출한다.
  Controller - 특정 요청에 대한 데이터 처리의 흐름을 제어한다.

5. Service 는 Controller 로부터 전달받은 Request 정보를 이용하여 요구되는 CRUD 작업을 수행한다.
  Service - DAO 메소드를 호출하여 얻어온 데이터를 보여주기 위한 데이터로 가공 처리하는 클래스

6. DAO 는 Service 로부터 받아온 요청을 수행하여 DB 데이터를 얻어온 후 조회일 경우 해당 데이터를 반환한다.
  DAO (Data Access Object) - 특정 요구 기능을 정의하여 쓸 수 있게 메소드 형식으로 만들어놓은 인터페이스
  
7. DAO 에서 얻어온 데이터들을 이용하여 Service 에서 보여주기 위한 데이터로 가공 처리한다.

8. Service 에서 가공 처리된 데이터를 ModelAndView 객체를 생성하고 삽입하여 HandlerAdapter 로 전달한다.

9. HandlerAdapter 의 handle() 메소드를 통해 얻어온 ModelAndView 객체를 이용하여 render() 메소드를 호출한다.
  render() 메소드는 AbstractView abstract class 등 정의되어 있는 곳이 많지만, 해당 메소드는 DispatcherServlet 내에 있는 메소드를 사용한다.

10. render() 메소드에서 viewResolver 를 통해 ModelAndView 객체의 viewName property 일치하는 파일이 있는지 탐색한 후 반환한다.

11. AbstractView 의 render() 메소드를 호출해서 rendering 준비 및 renderMergedOutputModel() 메소드를 호출하여 실제 rendering 을 수행한다.
  renderMergedOutputModel() 메소드 내부에서 view를 위한 객체가 없을 경우 include() 를 호출해서 jsp 객체를 생성한 뒤 Model 값을 rendering 해서 출력한다.
  view를 위한 객체가 있을 경우 forward() 메소드를 호출해서 기존에 캐싱된 jsp 객체에 Model 값을 rendering 해서 출력한다. 
  (response 객체 생성에 대한 설명이 부족하다.)

--- 개념 정리 ---

DispatcherServlet
  Client 로 부터 HTTP Request 를 받아서 해당 URL 과 일치하는 Controller 를 찾고 해당 요청을 보내게 만든다. (HandlerMapping / HandlerAdapter 이용)
  요청에 대한 응답으로 받은 결과값으로 (ModelAndView 객체) 화면을 구성하도록 만든다. (viewResolver 와 View 이용)

Web Server
  정적 데이터 요청이 들어오면 WAS 서버까지 가지 않고 즉각적인 응답이 이루어 질 수 있도록 만들어진 서버.
  WAS 서버까지 요청이 전달되면 응답시간이 오래걸리고, 모든 요청에 대해 응답을 만들다보니 서버 부하가 늘어난다.
  따라서 기존의 WAS(tomcat) 만으로 이루어진 서버에 Web Server(apache)를 추가하여 최적화?된 서버를 제공한다.

Model
  HTTP 요청에 상응하는 작업으로 여러가지 DML을 하나의 로직으로 묶거나 DB의 데이터를 변경 및 조회하며, browser로 출력할 데이터를 만들어낸다.
  
View
  Model 에서 HTTP 요청을 처리하고 Controller 에서 얻은 응답값(ModelAndView 객체)으로 browser 에 출력할 화면을 구성한다.

Controller
  HTTP 요청을 받아서 해당 요청을 수행하기 위한 모델(비지니스 로직)을 호출하고,
  결과를 화면에 출력하기 위해 ModelAndView 객체를 생성하여 DispatcherServlet 으로 전달한다.
  

